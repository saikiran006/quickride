# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import uber_pb2 as uber__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in uber_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RideServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DriverNotificationService = channel.unary_stream(
                '/uber.RideService/DriverNotificationService',
                request_serializer=uber__pb2.NotificationRequest.SerializeToString,
                response_deserializer=uber__pb2.DriverNotificationResponse.FromString,
                _registered_method=True)
        self.RiderNotificationService = channel.unary_stream(
                '/uber.RideService/RiderNotificationService',
                request_serializer=uber__pb2.NotificationRequest.SerializeToString,
                response_deserializer=uber__pb2.RiderNotificationResponse.FromString,
                _registered_method=True)
        self.RegisterDriver = channel.unary_unary(
                '/uber.RideService/RegisterDriver',
                request_serializer=uber__pb2.RegisterDriverRequest.SerializeToString,
                response_deserializer=uber__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.RegisterRider = channel.unary_unary(
                '/uber.RideService/RegisterRider',
                request_serializer=uber__pb2.RegisterRiderRequest.SerializeToString,
                response_deserializer=uber__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.RequestRide = channel.unary_unary(
                '/uber.RideService/RequestRide',
                request_serializer=uber__pb2.RideRequest.SerializeToString,
                response_deserializer=uber__pb2.RideResponse.FromString,
                _registered_method=True)
        self.AcceptRide = channel.unary_unary(
                '/uber.RideService/AcceptRide',
                request_serializer=uber__pb2.AcceptRideRequest.SerializeToString,
                response_deserializer=uber__pb2.AcceptRideResponse.FromString,
                _registered_method=True)
        self.RejectRide = channel.unary_unary(
                '/uber.RideService/RejectRide',
                request_serializer=uber__pb2.RejectRideRequest.SerializeToString,
                response_deserializer=uber__pb2.RejectRideResponse.FromString,
                _registered_method=True)
        self.CompleteRide = channel.unary_unary(
                '/uber.RideService/CompleteRide',
                request_serializer=uber__pb2.CompleteRideRequest.SerializeToString,
                response_deserializer=uber__pb2.CompleteRideResponse.FromString,
                _registered_method=True)
        self.GetRideStatus = channel.unary_unary(
                '/uber.RideService/GetRideStatus',
                request_serializer=uber__pb2.StatusRequest.SerializeToString,
                response_deserializer=uber__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.Exit = channel.unary_unary(
                '/uber.RideService/Exit',
                request_serializer=uber__pb2.ExitRequest.SerializeToString,
                response_deserializer=uber__pb2.ExitResponse.FromString,
                _registered_method=True)
        self.ServerNotificationService = channel.unary_unary(
                '/uber.RideService/ServerNotificationService',
                request_serializer=uber__pb2.ServerNotificationRequest.SerializeToString,
                response_deserializer=uber__pb2.ServerNotificationResponse.FromString,
                _registered_method=True)


class RideServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DriverNotificationService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RiderNotificationService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterRider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteRide(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRideStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerNotificationService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RideServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DriverNotificationService': grpc.unary_stream_rpc_method_handler(
                    servicer.DriverNotificationService,
                    request_deserializer=uber__pb2.NotificationRequest.FromString,
                    response_serializer=uber__pb2.DriverNotificationResponse.SerializeToString,
            ),
            'RiderNotificationService': grpc.unary_stream_rpc_method_handler(
                    servicer.RiderNotificationService,
                    request_deserializer=uber__pb2.NotificationRequest.FromString,
                    response_serializer=uber__pb2.RiderNotificationResponse.SerializeToString,
            ),
            'RegisterDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDriver,
                    request_deserializer=uber__pb2.RegisterDriverRequest.FromString,
                    response_serializer=uber__pb2.RegisterResponse.SerializeToString,
            ),
            'RegisterRider': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterRider,
                    request_deserializer=uber__pb2.RegisterRiderRequest.FromString,
                    response_serializer=uber__pb2.RegisterResponse.SerializeToString,
            ),
            'RequestRide': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestRide,
                    request_deserializer=uber__pb2.RideRequest.FromString,
                    response_serializer=uber__pb2.RideResponse.SerializeToString,
            ),
            'AcceptRide': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptRide,
                    request_deserializer=uber__pb2.AcceptRideRequest.FromString,
                    response_serializer=uber__pb2.AcceptRideResponse.SerializeToString,
            ),
            'RejectRide': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectRide,
                    request_deserializer=uber__pb2.RejectRideRequest.FromString,
                    response_serializer=uber__pb2.RejectRideResponse.SerializeToString,
            ),
            'CompleteRide': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteRide,
                    request_deserializer=uber__pb2.CompleteRideRequest.FromString,
                    response_serializer=uber__pb2.CompleteRideResponse.SerializeToString,
            ),
            'GetRideStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRideStatus,
                    request_deserializer=uber__pb2.StatusRequest.FromString,
                    response_serializer=uber__pb2.StatusResponse.SerializeToString,
            ),
            'Exit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exit,
                    request_deserializer=uber__pb2.ExitRequest.FromString,
                    response_serializer=uber__pb2.ExitResponse.SerializeToString,
            ),
            'ServerNotificationService': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerNotificationService,
                    request_deserializer=uber__pb2.ServerNotificationRequest.FromString,
                    response_serializer=uber__pb2.ServerNotificationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'uber.RideService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('uber.RideService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RideService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DriverNotificationService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/uber.RideService/DriverNotificationService',
            uber__pb2.NotificationRequest.SerializeToString,
            uber__pb2.DriverNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RiderNotificationService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/uber.RideService/RiderNotificationService',
            uber__pb2.NotificationRequest.SerializeToString,
            uber__pb2.RiderNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/RegisterDriver',
            uber__pb2.RegisterDriverRequest.SerializeToString,
            uber__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterRider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/RegisterRider',
            uber__pb2.RegisterRiderRequest.SerializeToString,
            uber__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/RequestRide',
            uber__pb2.RideRequest.SerializeToString,
            uber__pb2.RideResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AcceptRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/AcceptRide',
            uber__pb2.AcceptRideRequest.SerializeToString,
            uber__pb2.AcceptRideResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RejectRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/RejectRide',
            uber__pb2.RejectRideRequest.SerializeToString,
            uber__pb2.RejectRideResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CompleteRide(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/CompleteRide',
            uber__pb2.CompleteRideRequest.SerializeToString,
            uber__pb2.CompleteRideResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRideStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/GetRideStatus',
            uber__pb2.StatusRequest.SerializeToString,
            uber__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/Exit',
            uber__pb2.ExitRequest.SerializeToString,
            uber__pb2.ExitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ServerNotificationService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/uber.RideService/ServerNotificationService',
            uber__pb2.ServerNotificationRequest.SerializeToString,
            uber__pb2.ServerNotificationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
